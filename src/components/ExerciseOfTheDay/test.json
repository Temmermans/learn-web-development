[
  {
    "Exercise Name": "Map Mountains",
    "Description": "Double each number in the array.",
    "Initial Code": "export const double = (arr) => {  }",
    "Expected Output": "[4, 10, 16]",
    "Jest Test Code": "import { double } from './exercise.js';\ntest('Map Mountains', () => { expect(double([2, 5, 8])).toEqual([4, 10, 16]); });",
    "Solution Code": "export const double = (arr) => { return arr.map(num => num * 2); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Filter Odds",
    "Description": "Filter out the odd numbers.",
    "Initial Code": "export const filterOdds = (arr) => {  }",
    "Expected Output": "[2, 8]",
    "Jest Test Code": "import { filterOdds } from './exercise.js';\ntest('Filter Odds', () => { expect(filterOdds([2, 5, 8])).toEqual([2, 8]); });",
    "Solution Code": "export const filterOdds = (arr) => { return arr.filter(num => num % 2 === 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sum it Up",
    "Description": "Get the sum of all numbers.",
    "Initial Code": "export const sum = (arr) => {  }",
    "Expected Output": "15",
    "Jest Test Code": "import { sum } from './exercise.js';\ntest('Sum it Up', () => { expect(sum([2, 5, 8])).toBe(15); });",
    "Solution Code": "export const sum = (arr) => { return arr.reduce((acc, val) => acc + val, 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sort Descending",
    "Description": "Sort the numbers in descending order.",
    "Initial Code": "export const sortDesc = (arr) => {  }",
    "Expected Output": "[8, 5, 2]",
    "Jest Test Code": "import { sortDesc } from './exercise.js';\ntest('Sort Descending', () => { expect(sortDesc([2, 5, 8])).toEqual([8, 5, 2]); });",
    "Solution Code": "export const sortDesc = (arr) => { return arr.sort((a, b) => b - a); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find First Greater",
    "Description": "Find the first number greater than 5.",
    "Initial Code": "export const findFirstGreater = (arr) => {  }",
    "Expected Output": "8",
    "Jest Test Code": "import { findFirstGreater } from './exercise.js';\ntest('Find First Greater', () => { expect(findFirstGreater([2, 5, 8])).toBe(8); });",
    "Solution Code": "export const findFirstGreater = (arr) => { return arr.find(num => num > 5); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find Index of First Greater",
    "Description": "Find the index of the first number greater than 5.",
    "Initial Code": "export const findIndexOfFirstGreater = (arr) => {  }",
    "Expected Output": "2",
    "Jest Test Code": "import { findIndexOfFirstGreater } from './exercise.js';\ntest('Find Index of First Greater', () => { expect(findIndexOfFirstGreater([2, 5, 8])).toBe(2); });",
    "Solution Code": "export const findIndexOfFirstGreater = (arr) => { return arr.findIndex(num => num > 5); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Contains Even",
    "Description": "Check if there's an even number.",
    "Initial Code": "export const hasEven = (arr) => {  }",
    "Expected Output": "true",
    "Jest Test Code": "import { hasEven } from './exercise.js';\ntest('Contains Even', () => { expect(hasEven([2, 5, 8])).toBe(true); });",
    "Solution Code": "export const hasEven = (arr) => { return arr.some(num => num % 2 === 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "All Even",
    "Description": "Check if all numbers are even.",
    "Initial Code": "export const areAllEven = (arr) => {  }",
    "Expected Output": "false",
    "Jest Test Code": "import { areAllEven } from './exercise.js';\ntest('All Even', () => { expect(areAllEven([2, 5, 8])).toBe(false); });",
    "Solution Code": "export const areAllEven = (arr) => { return arr.every(num => num % 2 === 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Map Squares",
    "Description": "Square each number in the array.",
    "Initial Code": "export const square = (arr) => {  }",
    "Expected Output": "[4, 25, 64]",
    "Jest Test Code": "import { square } from './exercise.js';\ntest('Map Squares', () => { expect(square([2, 5, 8])).toEqual([4, 25, 64]); });",
    "Solution Code": "export const square = (arr) => { return arr.map(num => num * num); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Filter Evens",
    "Description": "Filter out the even numbers.",
    "Initial Code": "export const filterEvens = (arr) => {  }",
    "Expected Output": "[5]",
    "Jest Test Code": "import { filterEvens } from './exercise.js';\ntest('Filter Evens', () => { expect(filterEvens([2, 5, 8])).toEqual([5]); });",
    "Solution Code": "export const filterEvens = (arr) => { return arr.filter(num => num % 2 !== 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "String Concatenate",
    "Description": "Concatenate all strings in the array.",
    "Initial Code": "export const concatenate = (arr) => {  }",
    "Expected Output": "'HelloWorld'",
    "Jest Test Code": "import { concatenate } from './exercise.js';\ntest('String Concatenate', () => { expect(concatenate(['Hello', 'World'])).toBe('HelloWorld'); });",
    "Solution Code": "export const concatenate = (arr) => { return arr.reduce((acc, str) => acc + str, ''); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sort Ascending",
    "Description": "Sort the numbers in ascending order.",
    "Initial Code": "export const sortAsc = (arr) => {  }",
    "Expected Output": "[2, 5, 8]",
    "Jest Test Code": "import { sortAsc } from './exercise.js';\ntest('Sort Ascending', () => { expect(sortAsc([8, 5, 2])).toEqual([2, 5, 8]); });",
    "Solution Code": "export const sortAsc = (arr) => { return arr.sort((a, b) => a - b); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find First Below",
    "Description": "Find the first number below 5.",
    "Initial Code": "export const findFirstBelow = (arr) => {  }",
    "Expected Output": "2",
    "Jest Test Code": "import { findFirstBelow } from './exercise.js';\ntest('Find First Below', () => { expect(findFirstBelow([8, 5, 2])).toBe(2); });",
    "Solution Code": "export const findFirstBelow = (arr) => { return arr.find(num => num < 5); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find Index of First Below",
    "Description": "Find the index of the first number below 5.",
    "Initial Code": "export const findIndexOfFirstBelow = (arr) => {  }",
    "Expected Output": "2",
    "Jest Test Code": "import { findIndexOfFirstBelow } from './exercise.js';\ntest('Find Index of First Below', () => { expect(findIndexOfFirstBelow([8, 5, 2])).toBe(2); });",
    "Solution Code": "export const findIndexOfFirstBelow = (arr) => { return arr.findIndex(num => num < 5); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Contains Odd",
    "Description": "Check if there's an odd number.",
    "Initial Code": "export const hasOdd = (arr) => {  }",
    "Expected Output": "true",
    "Jest Test Code": "import { hasOdd } from './exercise.js';\ntest('Contains Odd', () => { expect(hasOdd([2, 5, 8])).toBe(true); });",
    "Solution Code": "export const hasOdd = (arr) => { return arr.some(num => num % 2 !== 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "All Below Ten",
    "Description": "Check if all numbers are below 10.",
    "Initial Code": "export const allBelowTen = (arr) => {  }",
    "Expected Output": "true",
    "Jest Test Code": "import { allBelowTen } from './exercise.js';\ntest('All Below Ten', () => { expect(allBelowTen([2, 5, 8])).toBe(true); });",
    "Solution Code": "export const allBelowTen = (arr) => { return arr.every(num => num < 10); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Any Above Twenty",
    "Description": "Check if any number is above 20.",
    "Initial Code": "export const anyAboveTwenty = (arr) => {  }",
    "Expected Output": "false",
    "Jest Test Code": "import { anyAboveTwenty } from './exercise.js';\ntest('Any Above Twenty', () => { expect(anyAboveTwenty([2, 5, 8])).toBe(false); });",
    "Solution Code": "export const anyAboveTwenty = (arr) => { return arr.some(num => num > 20); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Map to Strings",
    "Description": "Convert each number to a string.",
    "Initial Code": "export const convertToString = (arr) => {  }",
    "Expected Output": "['2', '5', '8']",
    "Jest Test Code": "import { convertToString } from './exercise.js';\ntest('Map to Strings', () => { expect(convertToString([2, 5, 8])).toEqual(['2', '5', '8']); });",
    "Solution Code": "export const convertToString = (arr) => { return arr.map(num => num.toString()); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sum of Doubles",
    "Description": "Double each number in the array and then get their sum.",
    "Initial Code": "export const sumOfDoubles = (arr) => {  }",
    "Expected Output": "30",
    "Jest Test Code": "import { sumOfDoubles } from './exercise.js';\ntest('Sum of Doubles', () => { expect(sumOfDoubles([2, 5, 8])).toBe(30); });",
    "Solution Code": "export const sumOfDoubles = (arr) => { return arr.map(num => num * 2).reduce((acc, num) => acc + num, 0); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Filter Below Ten",
    "Description": "Keep numbers below 10.",
    "Initial Code": "export const filterBelowTen = (arr) => {  }",
    "Expected Output": "[2, 5, 8]",
    "Jest Test Code": "import { filterBelowTen } from './exercise.js';\ntest('Filter Below Ten', () => { expect(filterBelowTen([2, 5, 8, 12])).toEqual([2, 5, 8]); });",
    "Solution Code": "export const filterBelowTen = (arr) => { return arr.filter(num => num < 10); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sort Descending",
    "Description": "Sort the numbers in descending order.",
    "Initial Code": "export const sortDesc = (arr) => {  }",
    "Expected Output": "[8, 5, 2]",
    "Jest Test Code": "import { sortDesc } from './exercise.js';\ntest('Sort Descending', () => { expect(sortDesc([2, 5, 8])).toEqual([8, 5, 2]); });",
    "Solution Code": "export const sortDesc = (arr) => { return arr.sort((a, b) => b - a); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Reduce Product",
    "Description": "Get the product of all numbers.",
    "Initial Code": "export const product = (arr) => {  }",
    "Expected Output": "80",
    "Jest Test Code": "import { product } from './exercise.js';\ntest('Reduce Product', () => { expect(product([2, 5, 8])).toBe(80); });",
    "Solution Code": "export const product = (arr) => { return arr.reduce((acc, num) => acc * num, 1); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "All Above Zero",
    "Description": "Check if all numbers are greater than 0.",
    "Initial Code": "export const allAboveZero = (arr) => {  }",
    "Expected Output": "true",
    "Jest Test Code": "import { allAboveZero } from './exercise.js';\ntest('All Above Zero', () => { expect(allAboveZero([2, 5, 8])).toBe(true); });",
    "Solution Code": "export const allAboveZero = (arr) => { return arr.every(num => num > 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Some Above Ten",
    "Description": "Check if there's any number above 10.",
    "Initial Code": "export const hasAboveTen = (arr) => {  }",
    "Expected Output": "true",
    "Jest Test Code": "import { hasAboveTen } from './exercise.js';\ntest('Some Above Ten', () => { expect(hasAboveTen([2, 5, 12])).toBe(true); });",
    "Solution Code": "export const hasAboveTen = (arr) => { return arr.some(num => num > 10); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Last Index of Five",
    "Description": "Find the last index of number 5.",
    "Initial Code": "export const lastIndex = (arr) => {  }",
    "Expected Output": "4",
    "Jest Test Code": "import { lastIndex } from './exercise.js';\ntest('Last Index of Five', () => { expect(lastIndex([2, 5, 8, 5])).toBe(3); });",
    "Solution Code": "export const lastIndex = (arr) => { return arr.lastIndexOf(5); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Filter Odd",
    "Description": "Keep only odd numbers.",
    "Initial Code": "export const filterOdd = (arr) => {  }",
    "Expected Output": "[5]",
    "Jest Test Code": "import { filterOdd } from './exercise.js';\ntest('Filter Odd', () => { expect(filterOdd([2, 5, 8])).toEqual([5]); });",
    "Solution Code": "export const filterOdd = (arr) => { return arr.filter(num => num % 2 !== 0); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Map Lengths",
    "Description": "Map the array of strings to their lengths.",
    "Initial Code": "export const mapToLength = (arr) => {  }",
    "Expected Output": "[5, 5]",
    "Jest Test Code": "import { mapToLength } from './exercise.js';\ntest('Map Lengths', () => { expect(mapToLength(['hello', 'world'])).toEqual([5, 5]); });",
    "Solution Code": "export const mapToLength = (arr) => { return arr.map(str => str.length); }",
    "Difficulty Score (1-10)": 3,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find First String",
    "Description": "Find the first string that contains 'lo'.",
    "Initial Code": "export const findFirstString = (arr) => {  }",
    "Expected Output": "'hello'",
    "Jest Test Code": "import { findFirstString } from './exercise.js';\ntest('Find First String', () => { expect(findFirstString(['hi', 'hello', 'hey'])).toBe('hello'); });",
    "Solution Code": "export const findFirstString = (arr) => { return arr.find(str => str.includes('lo')); }",
    "Difficulty Score (1-10)": 4,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Triple Then Sum",
    "Description": "Triple each number in the array and then get their sum.",
    "Initial Code": "export const sumOfTriples = (arr) => {  }",
    "Expected Output": "45",
    "Jest Test Code": "import { sumOfTriples } from './exercise.js';\ntest('Triple Then Sum', () => { expect(sumOfTriples([2, 5, 8])).toBe(45); });",
    "Solution Code": "export const sumOfTriples = (arr) => { return arr.map(num => num * 3).reduce((acc, num) => acc + num, 0); }",
    "Difficulty Score (1-10)": 6,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Combined Filter and Sort",
    "Description": "Keep numbers below 10 and sort them in descending order.",
    "Initial Code": "export const sortAndFilter = (arr) => {  }",
    "Expected Output": "[8, 5, 2]",
    "Jest Test Code": "import { sortAndFilter } from './exercise.js';\ntest('Combined Filter and Sort', () => { expect(sortAndFilter([12, 2, 5, 8, 11])).toEqual([8, 5, 2]); });",
    "Solution Code": "export const sortAndFilter = (arr) => { return arr.filter(num => num < 10).sort((a, b) => b - a); }",
    "Difficulty Score (1-10)": 6,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sort By String Length",
    "Description": "Sort the array of strings by their length in descending order.",
    "Initial Code": "export const sortByLength = (arr) => {  }",
    "Expected Output": "['elephant', 'tiger', 'cat']",
    "Jest Test Code": "import { sortByLength } from './exercise.js';\ntest('Sort By String Length', () => { expect(sortByLength(['cat', 'elephant', 'tiger'])).toEqual(['elephant', 'tiger', 'cat']); });",
    "Solution Code": "export const sortByLength = (arr) => { return arr.sort((a, b) => b.length - a.length); }",
    "Difficulty Score (1-10)": 7,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Get Highest Score",
    "Description": "Get the highest score from the object array.",
    "Initial Code": "export const highestScore = (arr) => {  }",
    "Expected Output": "97",
    "Jest Test Code": "import { highestScore } from './exercise.js';\ntest('Get Highest Score', () => { expect(highestScore([{name: 'John', score: 90}, {name: 'Jane', score: 97}])).toBe(97); });",
    "Solution Code": "export const highestScore = (arr) => { return arr.reduce((max, obj) => (obj.score > max ? obj.score : max), 0); }",
    "Difficulty Score (1-10)": 7,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "All Strings Have 'a'",
    "Description": "Check if all strings in the array contain the letter 'a'.",
    "Initial Code": "export const allHaveA = (arr) => {  }",
    "Expected Output": "false",
    "Jest Test Code": "import { allHaveA } from './exercise.js';\ntest('All Strings Have a', () => { expect(allHaveA(['apple', 'banana', 'cherry', 'date', 'egg'])).toBe(false); });",
    "Solution Code": "export const allHaveA = (arr) => { return arr.every(str => str.includes('a')); }",
    "Difficulty Score (1-10)": 6,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Find Index of Negative",
    "Description": "Find the index of the first negative number.",
    "Initial Code": "export const findNegative = (arr) => {  }",
    "Expected Output": "2",
    "Jest Test Code": "import { findNegative } from './exercise.js';\ntest('Find Index of Negative', () => { expect(findNegative([2, 5, -8, 12])).toBe(2); });",
    "Solution Code": "export const findNegative = (arr) => { return arr.findIndex(num => num < 0); }",
    "Difficulty Score (1-10)": 5,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Accumulative Addition",
    "Description": "For each number in the array, add it with all previous numbers. E.g., for [1,2,3] the result would be [1, 3, 6].",
    "Initial Code": "export const accumulativeAdd = (arr) => {  }",
    "Expected Output": "[1, 3, 6]",
    "Jest Test Code": "import { accumulativeAdd } from './exercise.js';\ntest('Accumulative Addition', () => { expect(accumulativeAdd([1, 2, 3])).toEqual([1, 3, 6]); });",
    "Solution Code": "export const accumulativeAdd = (arr) => { let sum = 0; return arr.map(num => sum += num); }",
    "Difficulty Score (1-10)": 7,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sum of Squares",
    "Description": "Get the sum of the squares of each number in the array.",
    "Initial Code": "export const sumOfSquares = (arr) => {  }",
    "Expected Output": "14",
    "Jest Test Code": "import { sumOfSquares } from './exercise.js';\ntest('Sum of Squares', () => { expect(sumOfSquares([1, 2, 3])).toBe(14); });",
    "Solution Code": "export const sumOfSquares = (arr) => { return arr.map(num => num * num).reduce((acc, num) => acc + num, 0); }",
    "Difficulty Score (1-10)": 7,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Remove Duplicates and Sort",
    "Description": "Remove duplicate numbers from the array and then sort them in ascending order.",
    "Initial Code": "export const uniqueSort = (arr) => {  }",
    "Expected Output": "[2, 5, 8]",
    "Jest Test Code": "import { uniqueSort } from './exercise.js';\ntest('Remove Duplicates and Sort', () => { expect(uniqueSort([8, 2, 5, 2, 8])).toEqual([2, 5, 8]); });",
    "Solution Code": "export const uniqueSort = (arr) => { return [...new Set(arr)].sort((a, b) => a - b); }",
    "Difficulty Score (1-10)": 8,
    "Category": "Javascript Array Methods"
  },
  {
    "Exercise Name": "Sum of Products",
    "Description": "For each pair of numbers, multiply them together and then get the sum of these products.",
    "Initial Code": "export const sumOfProducts = (arr1, arr2) => {  }",
    "Expected Output": "32",
    "Jest Test Code": "import { sumOfProducts } from './exercise.js';\ntest('Sum of Products', () => { expect(sumOfProducts([1, 2, 3], [1, 2, 3])).toBe(32); });",
    "Solution Code": "export const sumOfProducts = (arr1, arr2) => { return arr1.map((num, idx) => num * arr2[idx]).reduce((acc, num) => acc + num, 0); }",
    "Difficulty Score (1-10)": 9
  }
]
