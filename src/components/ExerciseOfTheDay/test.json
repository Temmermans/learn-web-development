[
  {
    "Exercise Name": "Map Mountains",
    "Description": "Double each number in the array.",
    "Initial Code": "const numbers = [2, 5, 8]; function double(arr) { // your code here }",
    "Expected Output": "[4, 10, 16]",
    "Jest Test Code": "test('Map Mountains', () => { expect(double([2, 5, 8])).toEqual([4, 10, 16]); });",
    "Solution Code": "function double(arr) { return arr.map(num => num * 2); }",
    "Difficulty Score (1-10)": 3
  },
  {
    "Exercise Name": "Filter Forest",
    "Description": "Keep numbers less than 10.",
    "Initial Code": "const numbers = [7, 12, 5, 20]; function underTen(arr) { // your code here }",
    "Expected Output": "[7, 5]",
    "Jest Test Code": "test('Filter Forest', () => { expect(underTen([7, 12, 5, 20])).toEqual([7, 5]); });",
    "Solution Code": "function underTen(arr) { return arr.filter(num => num < 10); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Reduce River",
    "Description": "Sum all numbers.",
    "Initial Code": "const numbers = [1, 3, 4]; function total(arr) { // your code here }",
    "Expected Output": 8,
    "Jest Test Code": "test('Reduce River', () => { expect(total([1, 3, 4])).toBe(8); });",
    "Solution Code": "function total(arr) { return arr.reduce((acc, cur) => acc + cur, 0); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Sorting Sands",
    "Description": "Sort words alphabetically.",
    "Initial Code": "const words = ['cat', 'apple', 'ball']; function alphabetize(arr) { // your code here }",
    "Expected Output": "['apple', 'ball', 'cat']",
    "Jest Test Code": "test('Sorting Sands', () => { expect(alphabetize(['cat', 'apple', 'ball'])).toEqual(['apple', 'ball', 'cat']); });",
    "Solution Code": "function alphabetize(arr) { return arr.sort(); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Every Oasis",
    "Description": "Check if all numbers are even.",
    "Initial Code": "const numbers = [2, 4, 8]; function allEven(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Every Oasis', () => { expect(allEven([2, 4, 8])).toBe(true); });",
    "Solution Code": "function allEven(arr) { return arr.every(num => num % 2 === 0); }",
    "Difficulty Score (1-10)": 6
  },
  {
    "Exercise Name": "Some Savannah",
    "Description": "At least one number greater than 10.",
    "Initial Code": "const numbers = [3, 15, 7]; function bigNumberExist(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Some Savannah', () => { expect(bigNumberExist([3, 15, 7])).toBe(true); });",
    "Solution Code": "function bigNumberExist(arr) { return arr.some(num => num > 10); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Find Jungle",
    "Description": "First fruit starting with 'b'.",
    "Initial Code": "const fruits = ['apple', 'banana', 'cherry']; function firstB(arr) { // your code here }",
    "Expected Output": "'banana'",
    "Jest Test Code": "test('Find Jungle', () => { expect(firstB(['apple', 'banana', 'cherry'])).toBe('banana'); });",
    "Solution Code": "function firstB(arr) { return arr.find(fruit => fruit[0] === 'b'); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Index Islands",
    "Description": "Index of the first fruit starting with 'c'.",
    "Initial Code": "const fruits = ['apple', 'banana', 'cherry']; function findCPlace(arr) { // your code here }",
    "Expected Output": 2,
    "Jest Test Code": "test('Index Islands', () => { expect(findCPlace(['apple', 'banana', 'cherry'])).toBe(2); });",
    "Solution Code": "function findCPlace(arr) { return arr.findIndex(fruit => fruit[0] === 'c'); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Map the Stars",
    "Description": "Add '!' to the end of each word.",
    "Initial Code": "const words = ['Hello', 'World']; function exclaim(arr) { // your code here }",
    "Expected Output": "['Hello!', 'World!']",
    "Jest Test Code": "test('Map the Stars', () => { expect(exclaim(['Hello', 'World'])).toEqual(['Hello!', 'World!']); });",
    "Solution Code": "function exclaim(arr) { return arr.map(word => word + '!'); }",
    "Difficulty Score (1-10)": 2
  },
  {
    "Exercise Name": "Filter the Night",
    "Description": "Keep only words with more than 3 letters.",
    "Initial Code": "const words = ['sky', 'is', 'wide']; function longerWords(arr) { // your code here }",
    "Expected Output": "['wide']",
    "Jest Test Code": "test('Filter the Night', () => { expect(longerWords(['sky', 'is', 'wide'])).toEqual(['wide']); });",
    "Solution Code": "function longerWords(arr) { return arr.filter(word => word.length > 3); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Reduce the Galaxy",
    "Description": "Concatenate words into a single string.",
    "Initial Code": "const words = ['The', 'universe', 'is', 'vast']; function concatenate(arr) { // your code here }",
    "Expected Output": "'Theuniverseisvast'",
    "Jest Test Code": "test('Reduce the Galaxy', () => { expect(concatenate(['The', 'universe', 'is', 'vast'])).toBe('Theuniverseisvast'); });",
    "Solution Code": "function concatenate(arr) { return arr.reduce((acc, cur) => acc + cur, ''); }",
    "Difficulty Score (1-10)": 6
  },
  {
    "Exercise Name": "Sort the Constellations",
    "Description": "Sort numbers in descending order.",
    "Initial Code": "const numbers = [1, 4, 7]; function descending(arr) { // your code here }",
    "Expected Output": "[7, 4, 1]",
    "Jest Test Code": "test('Sort the Constellations', () => { expect(descending([1, 4, 7])).toEqual([7, 4, 1]); });",
    "Solution Code": "function descending(arr) { return arr.sort((a, b) => b - a); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Every Planet Aligned",
    "Description": "Check if all numbers are less than 10.",
    "Initial Code": "const numbers = [2, 5, 3]; function allSmall(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Every Planet Aligned', () => { expect(allSmall([2, 5, 3])).toBe(true); });",
    "Solution Code": "function allSmall(arr) { return arr.every(num => num < 10); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Some Asteroids Near",
    "Description": "See if at least one number is less than 5.",
    "Initial Code": "const numbers = [10, 7, 3]; function anyNear(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Some Asteroids Near', () => { expect(anyNear([10, 7, 3])).toBe(true); });",
    "Solution Code": "function anyNear(arr) { return arr.some(num => num < 5); }",
    "Difficulty Score (1-10)": 3
  },
  {
    "Exercise Name": "Find Nebula",
    "Description": "Find the first word that has 'sky' in it.",
    "Initial Code": "const words = ['stars', 'skyscraper', 'moon']; function skyWord(arr) { // your code here }",
    "Expected Output": "'skyscraper'",
    "Jest Test Code": "test('Find Nebula', () => { expect(skyWord(['stars', 'skyscraper', 'moon'])).toBe('skyscraper'); });",
    "Solution Code": "function skyWord(arr) { return arr.find(word => word.includes('sky')); }",
    "Difficulty Score (1-10)": 6
  },
  {
    "Exercise Name": "Index Black Holes",
    "Description": "Get the index of the first number that is equal to 0.",
    "Initial Code": "const numbers = [5, 9, 0, 4]; function zeroPlace(arr) { // your code here }",
    "Expected Output": 2,
    "Jest Test Code": "test('Index Black Holes', () => { expect(zeroPlace([5, 9, 0, 4])).toBe(2); });",
    "Solution Code": "function zeroPlace(arr) { return arr.findIndex(num => num === 0); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Reduce Rocket Fuel",
    "Description": "Subtract each number from the starting value of 100.",
    "Initial Code": "const numbers = [10, 20, 30]; function rocketFuel(arr) { // your code here }",
    "Expected Output": 40,
    "Jest Test Code": "test('Reduce Rocket Fuel', () => { expect(rocketFuel([10, 20, 30])).toBe(40); });",
    "Solution Code": "function rocketFuel(arr) { return arr.reduce((acc, cur) => acc - cur, 100); }",
    "Difficulty Score (1-10)": 6
  },
  {
    "Exercise Name": "Filter the Stars",
    "Description": "Keep words that don't have the letter 'a' in them.",
    "Initial Code": "const words = ['star', 'moon', 'sun']; function noAWords(arr) { // your code here }",
    "Expected Output": "['sun']",
    "Jest Test Code": "test('Filter the Stars', () => { expect(noAWords(['star', 'moon', 'sun'])).toEqual(['sun']); });",
    "Solution Code": "function noAWords(arr) { return arr.filter(word => !word.includes('a')); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Map the Moonbeams",
    "Description": "Multiply each number by 3.",
    "Initial Code": "const numbers = [3, 6, 9]; function triple(arr) { // your code here }",
    "Expected Output": "[9, 18, 27]",
    "Jest Test Code": "test('Map the Moonbeams', () => { expect(triple([3, 6, 9])).toEqual([9, 18, 27]); });",
    "Solution Code": "function triple(arr) { return arr.map(num => num * 3); }",
    "Difficulty Score (1-10)": 3
  },
  {
    "Exercise Name": "Filtering Feathers",
    "Description": "Keep names that start with an 'F'.",
    "Initial Code": "const names = ['Fred', 'Lucy', 'Anita']; function startsWithF(arr) { // your code here }",
    "Expected Output": "['Fred']",
    "Jest Test Code": "test('Filtering Feathers', () => { expect(startsWithF(['Fred', 'Lucy', 'Anita'])).toEqual(['Fred']); });",
    "Solution Code": "function startsWithF(arr) { return arr.filter(name => name.startsWith('F')); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Reducing Ripples",
    "Description": "Concatenate string array into one with spaces in between.",
    "Initial Code": "const words = ['Water', 'is', 'blue']; function combine(arr) { // your code here }",
    "Expected Output": "'Water is blue'",
    "Jest Test Code": "test('Reducing Ripples', () => { expect(combine(['Water', 'is', 'blue'])).toBe('Water is blue'); });",
    "Solution Code": "function combine(arr) { return arr.reduce((acc, cur) => acc + ' ' + cur); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Sorting Snowflakes",
    "Description": "Sort numbers in ascending order.",
    "Initial Code": "const numbers = [7, 2, 5]; function ascending(arr) { // your code here }",
    "Expected Output": "[2, 5, 7]",
    "Jest Test Code": "test('Sorting Snowflakes', () => { expect(ascending([7, 2, 5])).toEqual([2, 5, 7]); });",
    "Solution Code": "function ascending(arr) { return arr.sort((a, b) => a - b); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Every Echo",
    "Description": "Check if all words have length greater than 3.",
    "Initial Code": "const words = ['hello', 'world', 'tree']; function longerThanThree(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Every Echo', () => { expect(longerThanThree(['hello', 'world', 'tree'])).toBe(true); });",
    "Solution Code": "function longerThanThree(arr) { return arr.every(word => word.length > 3); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Some Sunrays",
    "Description": "Check if any word starts with 's'.",
    "Initial Code": "const words = ['apple', 'sun', 'tree']; function startsWithS(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Some Sunrays', () => { expect(startsWithS(['apple', 'sun', 'tree'])).toBe(true); });",
    "Solution Code": "function startsWithS(arr) { return arr.some(word => word.startsWith('s')); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Find a Fountain",
    "Description": "Find the first number greater than 50.",
    "Initial Code": "const numbers = [20, 55, 30]; function firstGreaterThanFifty(arr) { // your code here }",
    "Expected Output": 55,
    "Jest Test Code": "test('Find a Fountain', () => { expect(firstGreaterThanFifty([20, 55, 30])).toBe(55); });",
    "Solution Code": "function firstGreaterThanFifty(arr) { return arr.find(num => num > 50); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Index of Ice",
    "Description": "Find the index of the word 'ice'.",
    "Initial Code": "const words = ['snow', 'ice', 'water']; function indexOfIce(arr) { // your code here }",
    "Expected Output": 1,
    "Jest Test Code": "test('Index of Ice', () => { expect(indexOfIce(['snow', 'ice', 'water'])).toBe(1); });",
    "Solution Code": "function indexOfIce(arr) { return arr.findIndex(word => word === 'ice'); }",
    "Difficulty Score (1-10)": 4
  },
  {
    "Exercise Name": "Reduce by Ratio",
    "Description": "Multiply all numbers in the array.",
    "Initial Code": "const numbers = [2, 3, 4]; function multiplyAll(arr) { // your code here }",
    "Expected Output": 24,
    "Jest Test Code": "test('Reduce by Ratio', () => { expect(multiplyAll([2, 3, 4])).toBe(24); });",
    "Solution Code": "function multiplyAll(arr) { return arr.reduce((acc, cur) => acc * cur, 1); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Filtering Fantasies",
    "Description": "Keep only words with more than two syllables.",
    "Initial Code": "const words = ['fantasy', 'dream', 'cry']; function multiSyllable(arr) { // your code here }",
    "Expected Output": "['fantasy']",
    "Jest Test Code": "test('Filtering Fantasies', () => { expect(multiSyllable(['fantasy', 'dream', 'cry'])).toEqual(['fantasy']); });",
    "Solution Code": "function multiSyllable(arr) { return arr.filter(word => word.match(/[aeiouAEIOU]{1,2}/g).length > 2); }",
    "Difficulty Score (1-10)": 7
  },
  {
    "Exercise Name": "Summing Spectacles",
    "Description": "Calculate the sum of all numbers in an array.",
    "Initial Code": "const numbers = [5, 10, 15]; function sumAll(arr) { // your code here }",
    "Expected Output": 30,
    "Jest Test Code": "test('Summing Spectacles', () => { expect(sumAll([5, 10, 15])).toBe(30); });",
    "Solution Code": "function sumAll(arr) { return arr.reduce((acc, cur) => acc + cur, 0); }",
    "Difficulty Score (1-10)": 5
  },
  {
    "Exercise Name": "Array Flattener",
    "Description": "Flatten a nested array.",
    "Initial Code": "const nestedArray = [[1, 2], [3, 4], [5, 6]]; function flatten(arr) { // your code here }",
    "Expected Output": "[1, 2, 3, 4, 5, 6]",
    "Jest Test Code": "test('Array Flattener', () => { expect(flatten([[1, 2], [3, 4], [5, 6]])).toEqual([1, 2, 3, 4, 5, 6]); });",
    "Solution Code": "function flatten(arr) { return arr.reduce((acc, cur) => acc.concat(cur), []); }",
    "Difficulty Score (1-10)": 7
  },
  {
    "Exercise Name": "Counting Characters",
    "Description": "Count how many times a specific character appears in an array of strings.",
    "Initial Code": "const strings = ['apple', 'banana', 'cherry']; function countA(arr) { // your code here }",
    "Expected Output": 4,
    "Jest Test Code": "test('Counting Characters', () => { expect(countA(['apple', 'banana', 'cherry'])).toBe(4); });",
    "Solution Code": "function countA(arr) { return arr.reduce((acc, cur) => acc + (cur.match(/a/g) || []).length, 0); }",
    "Difficulty Score (1-10)": 8
  },
  {
    "Exercise Name": "Array to Object",
    "Description": "Convert an array of strings into an object where each string is a key, and the value is the length of the string.",
    "Initial Code": "const words = ['one', 'two', 'three']; function arrayToObject(arr) { // your code here }",
    "Expected Output": "{ 'one': 3, 'two': 3, 'three': 5 }",
    "Jest Test Code": "test('Array to Object', () => { expect(arrayToObject(['one', 'two', 'three'])).toEqual({ 'one': 3, 'two': 3, 'three': 5 }); });",
    "Solution Code": "function arrayToObject(arr) { return arr.reduce((obj, word) => { obj[word] = word.length; return obj; }, {}); }",
    "Difficulty Score (1-10)": 8
  },
  {
    "Exercise Name": "Max Finder",
    "Description": "Find the maximum number in an array.",
    "Initial Code": "const numbers = [3, 9, 2]; function findMax(arr) { // your code here }",
    "Expected Output": 9,
    "Jest Test Code": "test('Max Finder', () => { expect(findMax([3, 9, 2])).toBe(9); });",
    "Solution Code": "function findMax(arr) { return arr.reduce((acc, cur) => (acc > cur ? acc : cur)); }",
    "Difficulty Score (1-10)": 6
  },
  {
    "Exercise Name": "Chained Words",
    "Description": "Determine if each word in an array starts with the last character of the previous word.",
    "Initial Code": "const words = ['apple', 'elephant', 'tiger']; function isChained(arr) { // your code here }",
    "Expected Output": "true",
    "Jest Test Code": "test('Chained Words', () => { expect(isChained(['apple', 'elephant', 'tiger'])).toBe(true); });",
    "Solution Code": "function isChained(arr) { return arr.reduce((isChain, word, index, array) => { if (index === 0) return true; return isChain && word[0] === array[index - 1][array[index - 1].length - 1]; }); }",
    "Difficulty Score (1-10)": 9
  }
]
